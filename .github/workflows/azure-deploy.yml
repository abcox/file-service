name: Deploy to Azure App Service (Comprehensive)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '22.14.0'
  AZURE_WEBAPP_NAME: 'vorba-file-service'
  AZURE_RESOURCE_GROUP: 'vorba-file-service-rg'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build NestJS application
        run: |
          echo "=== BUILD STEP DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Running: npm run build"
          
          # Run build with verbose output
          npm run build
          
          echo "=== POST-BUILD DEBUG ==="
          echo "Build exit code: $?"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Dist directory contents:"
          ls -la dist/ || echo "dist/ directory not found"
          
          # Check for any .js files
          echo "JavaScript files in dist:"
          find dist/ -name "*.js" 2>/dev/null || echo "No .js files found"
          
          # Check for main.js specifically
          echo "Main.js exists: $(test -f dist/main.js && echo 'YES' || echo 'NO')"
          
          # If no .js files, try to run build manually with more verbose output
          if [ ! -f dist/main.js ]; then
            echo "=== MANUAL BUILD DEBUG ==="
            echo "Trying manual TypeScript compilation..."
            npx tsc --listFiles 2>&1 | head -20 || echo "TypeScript compilation failed"
            echo "Checking for TypeScript errors..."
            npx tsc --noEmit 2>&1 || echo "TypeScript compilation has errors"
          fi
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          # Debug: Check what was built
          echo "=== BUILD DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Dist directory contents:"
          ls -la dist/ || echo "dist/ directory not found"
          
          # Create a deployment package optimized for Linux App Service
          mkdir -p deploy
          echo "Created deploy directory"
          
          # Copy built files - preserve the dist structure
          if [ -d "dist" ]; then
            echo "Copying dist/* to deploy/..."
            cp -r dist/* deploy/
            echo "✅ Copied dist/* to deploy/"
          else
            echo "❌ ERROR: dist directory not found!"
            exit 1
          fi
          
          # Copy package files
          echo "Copying package files..."
          cp package*.json deploy/
          cp nest-cli.json deploy/ 2>/dev/null || echo "nest-cli.json not found (optional)"
          echo "✅ Package files copied"
          
          # Copy configuration files
          echo "Copying configuration files..."
          echo "Env directory exists: $(test -d env && echo 'YES' || echo 'NO')"
          echo "Env directory contents:"
          ls -la env/ || echo "env/ directory not found"
          cp -r env/ deploy/
          echo "✅ Configuration files copied"
          echo "Deploy env directory exists: $(test -d deploy/env && echo 'YES' || echo 'NO')"
          echo "Deploy env directory contents:"
          ls -la deploy/env/ || echo "deploy/env/ directory not found"
          
          # Install production dependencies in deploy directory
          echo "Installing production dependencies in deploy/..."
          cd deploy
          npm ci --only=production
          cd ..
          echo "✅ Production dependencies installed"
          
          # Determine the correct main.js location based on actual build output
          echo "🔍 Determining main.js location..."
          if [ -f "deploy/main.js" ]; then
            MAIN_JS_PATH="main.js"
            echo "Found main.js at deploy/main.js"
          elif [ -f "deploy/src/main.js" ]; then
            MAIN_JS_PATH="src/main.js"
            echo "Found main.js at deploy/src/main.js"
          else
            echo "❌ ERROR: Could not find main.js in deploy directory!"
            echo "Deploy directory contents:"
            find deploy/ -name "*.js" 2>/dev/null || echo "No .js files found"
            echo "Full deploy directory structure:"
            find deploy/ -type f 2>/dev/null | head -20
            exit 1
          fi
          
          echo "✅ Using main.js at: $MAIN_JS_PATH"
          
          # Create startup command for Linux App Service
          echo "Creating startup.txt with: node $MAIN_JS_PATH"
          echo "node $MAIN_JS_PATH" > deploy/startup.txt
          
          # Create .deployment file to specify startup command
          echo "Creating .deployment file with command: node $MAIN_JS_PATH"
          #cat > deploy/.deployment << EOF
          #[config]
          #command = node $MAIN_JS_PATH
          #EOF
          echo "[config]" > deploy/.deployment
          echo "command = node $MAIN_JS_PATH" >> deploy/.deployment

          # Debug: List contents of deploy directory
          echo "=== DEPLOY PACKAGE DEBUG INFO ==="
          echo "Deploy directory contents:"
          ls -la deploy/
          echo "Main.js exists at deploy/main.js: $(test -f deploy/main.js && echo 'YES' || echo 'NO')"
          echo "Main.js exists at deploy/src/main.js: $(test -f deploy/src/main.js && echo 'YES' || echo 'NO')"
          echo "Package.json exists: $(test -f deploy/package.json && echo 'YES' || echo 'NO')"
          echo ".deployment file contents:"
          cat deploy/.deployment
          echo "startup.txt contents:"
          cat deploy/startup.txt
          
          # Show file sizes (commented out to reduce log noise)
          # echo "File sizes in deploy directory:"
          # du -h deploy/* || echo "Could not get file sizes"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      #- name: Configure App Service settings
      #  run: |
      #    echo "Configuring App Service environment variables..."
          
          # Debug: Check current settings before changes
          #echo "=== CURRENT APP SETTINGS ==="
          #az webapp config appsettings list \
          #  --name ${{ env.AZURE_WEBAPP_NAME }} \
          #  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          #  --query "[].{name:name, value:value}" \
          #  --output table || echo "Failed to get current settings"
          
          # Set environment variables and configuration
          # IMPORTANT: use --add-settings to avoid overwriting existing settings
          #echo "Setting environment variables and configuration..."
          #az webapp config appsettings set \
          #  --name ${{ env.AZURE_WEBAPP_NAME }} \
          #  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          #  --add-settings \
          #  NODE_ENV=production \
          #  PORT=8080 \
          #  WEBSITE_NODE_DEFAULT_VERSION=22.14.0 \
          #  SCM_COMMAND_IDLE_TIMEOUT=120
          
          # Debug: Check settings after changes
          #echo "=== UPDATED APP SETTINGS ==="
          #az webapp config appsettings list \
          #  --name ${{ env.AZURE_WEBAPP_NAME }} \
          #  --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          #  --query "[].{name:name, value:value}" \
          #  --output table || echo "Failed to get updated settings"
        #env:
        #  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        #  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        #  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Debug deployment package
        run: |
          echo "=== DEPLOYMENT PACKAGE VERIFICATION ==="
          echo "Package directory: ./deploy"
          echo "Package exists: $(test -d deploy && echo 'YES' || echo 'NO')"
          echo "Package size: $(du -sh deploy 2>/dev/null || echo 'Could not get size')"
          echo "Package contents:"
          find deploy/ -type f 2>/dev/null | head -20
          echo "Main.js location: $(find deploy/ -name 'main.js' -not -path '*/node_modules/*' 2>/dev/null || echo 'NOT FOUND')"
          echo "Env folder exists: $(test -d deploy/env && echo 'YES' || echo 'NO')"
          echo "Env folder contents:"
          ls -la deploy/env/ 2>/dev/null || echo "deploy/env/ not found"
          echo ".deployment file:"
          cat deploy/.deployment 2>/dev/null || echo "No .deployment file"

      - name: Deploy to Azure App Service
        run: |
          # Create publish profile file from XML content
          echo "${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}" > publish-profile.xml
          
          # Debug: Show the publish profile content
          echo "Publish profile content:"
          cat publish-profile.xml
          
          # Extract username and password from ZipDeploy profile
          echo "Extracting credentials..."
          PUBLISHING_USERNAME=$(grep -A 10 'Zip Deploy' publish-profile.xml | grep 'userName=' | sed 's/.*userName="\([^"]*\)".*/\1/')
          PUBLISHING_PASSWORD=$(grep -A 10 'Zip Deploy' publish-profile.xml | grep 'userPWD=' | sed 's/.*userPWD="\([^"]*\)".*/\1/')
          
          # Debug: Show the extracted values
          echo "Raw username: '$PUBLISHING_USERNAME'"
          echo "Raw password: '${PUBLISHING_PASSWORD:0:3}...${PUBLISHING_PASSWORD: -3}'"
          
          # Debug: Show the grep results
          echo "Grep results for userName:"
          grep -A 15 'Zip Deploy' publish-profile.xml | grep 'userName='
          echo "Grep results for userPWD:"
          grep -A 15 'Zip Deploy' publish-profile.xml | grep 'userPWD='
          
          # Test credentials with a simple API call first
          echo "Testing credentials..."
          TEST_RESPONSE=$(curl -u "$PUBLISHING_USERNAME:$PUBLISHING_PASSWORD" \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/settings" \
            -w "\nHTTP_STATUS: %{http_code}\n" 2>/dev/null || echo "Failed")
          echo "Test response: $TEST_RESPONSE"
          
          # Create ZIP of deploy folder
          echo "Creating deploy.zip..."
          cd deploy
          zip -r ../deploy.zip . > /dev/null 2>&1
          cd ..
          
          # Deploy using Kudu ZipDeploy API
          echo "Deploying to Azure App Service..."
          echo "ZIP file size: $(ls -lh deploy.zip)"
          echo "Deploying to: https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/zipdeploy"
          
          # Deploy with verbose output
          DEPLOY_RESPONSE=$(curl -u "$PUBLISHING_USERNAME:$PUBLISHING_PASSWORD" \
            -X POST \
            "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/zipdeploy" \
            --data-binary @deploy.zip \
            -w "\nHTTP_STATUS: %{http_code}\n")
          
          echo "Deploy response: $DEPLOY_RESPONSE"

          #echo "ALT deploy"
          #B64_AUTH=$(echo -n "$PUBLISHING_USERNAME:$PUBLISHING_PASSWORD" | base64)
          #curl -sS -X POST \
          #  -H "Authorization: Basic $B64_AUTH" \
          #  -H "Content-Type: application/zip" \
          #  --data-binary @deploy.zip \
          #  "https://${{ env.AZURE_WEBAPP_NAME }}.scm.azurewebsites.net/api/zipdeploy"

          #echo "Deploy response:"
          #echo "$DEPLOY_RESPONSE"

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30

      - name: Verify deployment via Azure CLI
        run: |
          echo "=== POST-DEPLOYMENT VERIFICATION ==="
          
          # Check if the app service is running
          echo "Checking app service status..."
          az webapp show \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "{name:name, state:state, kind:kind, location:location}" \
            --output table
          
          # Check deployment status
          echo "Checking deployment status..."
          az webapp deployment list-publishing-credentials \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "publishingUserName" \
            --output tsv
          
          echo "Deployment verification complete"

      - name: Health check
        run: |
          echo "Performing health check..."
          # Wait a bit more for the app to fully start
          sleep 60
          
          # Try to hit the health endpoint
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "Checking health at: $HEALTH_URL"
          
          # Use curl with retry logic
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⚠️  Health check attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**App Service:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the application is running correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Check Azure App Service logs if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application performance" >> $GITHUB_STEP_SUMMARY 