name: Deploy to Azure App Service (Comprehensive)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '22.14.0'
  AZURE_WEBAPP_NAME: 'vorba-file-service-3'
  AZURE_RESOURCE_GROUP: 'vorba-file-service-rg'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  DEPLOY_ENV: 'production'

jobs:
  # optionally, can use job build-and-deploy: ?
  build:
    runs-on: ubuntu-latest # at the time of writing: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      # TODO: review this step, and if is better to make it part of the build process
      #- name: Run tests
      #  run: npm test

      - name: Build NestJS application
        run: |
          echo "=== BUILD STEP DEBUG ==="
          echo "Ubuntu version: $(lsb_release -rs)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Running: npm run build"
          
          # Run build with verbose output
          npm run build

      - name: Post build inspection
        run: |
          echo "=== POST-BUILD INSPECTION ==="
          echo "Build exit code: $?"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Dist directory contents:"
          ls -la dist/ || echo "dist/ directory not- found"
          
          if [ $? -ne 0 ]; then
            echo "Build failed - exiting"
            exit 1
          else
            echo "Build successful"
          fi

      # TODO: review this step, and if is better to make it part of the build process
      - name: Copy config file to dist
        run: cp src/config/config.${{ env.DEPLOY_ENV }}.json dist/config.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
            #node_modules/ # TODO: review this step, and if is better to make it part of the build process (or leave in release step as an npm ci --only=production)
          retention-days: 10
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      # TODO: review the approach of installing dependencies in the release step
      # rather than in the build step (which becomes tar.gz - and we need to unzip)
      # as well, if node_modules is generated at the build step, we take a performance hit with large upload/download of build artifact
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      # TODO: this step is dependent on the setup-node step
      - name: Install production dependencies
        run: |
          cd dist
          npm ci --only=production
      
      - name: Install Playwright browsers
        run: |
          cd dist
          npx playwright install chromium --with-deps
      
      - name: Copy startup script
        run: |
          cp ../startup.sh .
          chmod +x startup.sh
      

      
      - name: Create release package
        run: |
          zip -r release-${{ github.run_number }}.zip .
      
      - name: Upload release
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: release-${{ github.run_number }}.zip
          retention-days: 10
          if-no-files-found: error
          #compression-level: 9 # 1-9, 9 is best compression
          
      - name: Inspect release contents  # ‚Üê Add this step
        run: |
          echo "=== POST-RELEASE INSPECTION ==="
          echo "Zip file size:"
          ls -lh release-${{ github.run_number }}.zip
          
          echo ""
          echo "Zip contents:"
          unzip -l release-${{ github.run_number }}.zip | head -20
          
          echo ""
          echo "Extract and show structure:"
          unzip -q release-${{ github.run_number }}.zip -d temp-extract
          find temp-extract -type f | head -10
          rm -rf temp-extract
          echo "=== END INSPECTION ==="

  deploy:
    runs-on: ubuntu-latest
    needs: release
    # TODO: review how 'environment' is used, and for what purpose/benefit
    #environment:
    #  name: 'production'
    #  url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: ./

      - name: Unzip release package
        run: unzip release-${{ github.run_number }}.zip

      - name: Inspect unzipped release contents
        run: |
          echo "=== UNZIPPED RELEASE INSPECTION ==="
          echo "Current directory: $(pwd)"
          echo ""
          echo "üìÅ All files and directories:"
          ls -la
          echo ""
          echo "üìÇ Directory structure:"
          tree . || find . -type d | head -15
          echo ""
          echo "üìÑ JavaScript files:"
          find . -name "*.js" | head -10
          echo ""
          echo "üì¶ Package files:"
          find . -name "package.json" -o -name "*.json" | head -5
          echo ""
          echo "ÔøΩÔøΩ File count by type:"
          echo "JS files: $(find . -name '*.js' | wc -l)"
          echo "JSON files: $(find . -name '*.json' | wc -l)"
          echo "Total files: $(find . -type f | wc -l)"
          echo ""
          echo "ÔøΩÔøΩ Key files check:"
          if [ -f "package.json" ]; then
            echo "‚úÖ package.json found"
            echo "   Dependencies: $(jq -r '.dependencies | keys | length' package.json 2>/dev/null || echo 'unknown')"
          else
            echo "‚ùå package.json not found"
          fi
          
          if [ -f "dist/main.js" ]; then
            echo "‚úÖ dist/main.js found"
            echo "   Size: $(ls -lh dist/main.js | awk '{print $5}')"
          else
            echo "‚ùå dist/main.js not found"
          fi
          
          if [ -d "node_modules" ]; then
            echo "‚úÖ node_modules found"
            echo "   Size: $(du -sh node_modules | awk '{print $1}')"
          else
            echo "‚ùå node_modules not found"
          fi
          
          echo ""
          echo "=== END INSPECTION ==="

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          #slot-name: 'production'
          publish-profile: ${{ secrets.AZ_WEBAPP_PUB_PRFL__FILE_SVC_3 }}
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}