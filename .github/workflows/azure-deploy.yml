name: Deploy to Azure App Service (Comprehensive)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'vorba-file-service'
  AZURE_RESOURCE_GROUP: 'vorba-file-service-rg'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      #- name: Login to Azure
      #  uses: azure/login@v2
      #  with:
      #    creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build NestJS application
        run: |
          echo "=== BUILD STEP DEBUG ==="
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Running: npm run build"
          
          # Run build with verbose output
          npm run build
          
          echo "=== POST-BUILD DEBUG ==="
          echo "Build exit code: $?"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Dist directory contents:"
          ls -la dist/ || echo "dist/ directory not found"
          
          # Check for any .js files
          echo "JavaScript files in dist:"
          find dist/ -name "*.js" 2>/dev/null || echo "No .js files found"
          
          # Check for main.js specifically
          echo "Main.js exists: $(test -f dist/main.js && echo 'YES' || echo 'NO')"
          
          # If no .js files, try to run build manually with more verbose output
          if [ ! -f dist/main.js ]; then
            echo "=== MANUAL BUILD DEBUG ==="
            echo "Trying manual TypeScript compilation..."
            npx tsc --listFiles 2>&1 | head -20 || echo "TypeScript compilation failed"
            echo "Checking for TypeScript errors..."
            npx tsc --noEmit 2>&1 || echo "TypeScript compilation has errors"
          fi
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          # Debug: Check what was built
          echo "=== BUILD DEBUG INFO ==="
          echo "Current directory: $(pwd)"
          echo "Dist directory exists: $(test -d dist && echo 'YES' || echo 'NO')"
          echo "Dist directory contents:"
          ls -la dist/ || echo "dist/ directory not found"
          
          # Create a deployment package optimized for Linux App Service
          mkdir -p deploy
          
          # Copy built files - DO NOTpreserve the dist structure
          if [ -d "dist" ]; then
            cp -r dist deploy/
            echo "Copied dist/* to deploy/"
          else
            echo "ERROR: dist directory not found!"
            exit 1
          fi
          
          # Copy package files
          cp package*.json deploy/
          cp nest-cli.json deploy/ 2>/dev/null || true
          
          # Copy configuration files
          cp -r env/ deploy/
          
          # Install production dependencies in deploy directory
          echo "Installing production dependencies..."
          cd deploy
          npm ci --only=production
          cd ..
          
          # Determine the correct main.js location based on actual build output
          if [ -f "deploy/main.js" ]; then
            MAIN_JS_PATH="main.js"
          elif [ -f "deploy/src/main.js" ]; then
            MAIN_JS_PATH="src/main.js"
          else
            echo "ERROR: Could not find main.js in deploy directory!"
            echo "Deploy directory contents:"
            find deploy/ -name "*.js" 2>/dev/null || echo "No .js files found"
            exit 1
          fi
          
          echo "Using main.js at: $MAIN_JS_PATH"
          
          # Create startup command for Linux App Service
          echo "node $MAIN_JS_PATH" > deploy/startup.txt
          
          # Create .deployment file to specify startup command
          cat > deploy/.deployment << EOF
          [config]
          command = node $MAIN_JS_PATH
          EOF
          
          # Debug: List contents of deploy directory
          echo "=== DEPLOY PACKAGE DEBUG INFO ==="
          echo "Deploy directory contents:"
          ls -la deploy/
          echo "Main.js exists at deploy/main.js: $(test -f deploy/main.js && echo 'YES' || echo 'NO')"
          echo "Main.js exists at deploy/src/main.js: $(test -f deploy/src/main.js && echo 'YES' || echo 'NO')"
          echo "Package.json exists: $(test -f deploy/package.json && echo 'YES' || echo 'NO')"
          
          # Show file sizes
          echo "File sizes in deploy directory:"
          du -h deploy/* || echo "Could not get file sizes"

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deploy

      - name: Configure App Service settings
        run: |
          echo "Configuring App Service environment variables..."
          # Set Node.js version
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings WEBSITE_NODE_DEFAULT_VERSION=22.14.0
          
          # Set environment variables for temporary Key Vault bypass
          az webapp config appsettings set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
            AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
            JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            NODE_ENV=production \
            SCM_COMMAND_IDLE_TIMEOUT=600
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30

      - name: Health check
        run: |
          echo "Performing health check..."
          # Wait a bit more for the app to fully start
          sleep 60
          
          # Try to hit the health endpoint
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "Checking health at: $HEALTH_URL"
          
          # Use curl with retry logic
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⚠️  Health check attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**App Service:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the application is running correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Check Azure App Service logs if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application performance" >> $GITHUB_STEP_SUMMARY 