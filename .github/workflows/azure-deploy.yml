name: Deploy to Azure App Service (Comprehensive)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual triggers

env:
  NODE_VERSION: '18.x'
  AZURE_WEBAPP_NAME: 'vorba-file-service'
  AZURE_RESOURCE_GROUP: 'vorba-file-service-rg'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build NestJS application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          # Create a deployment package optimized for Linux App Service
          mkdir -p deploy
          cp -r dist/* deploy/
          cp package*.json deploy/
          cp nest-cli.json deploy/ 2>/dev/null || true
          
          # Create startup command for Linux App Service
          echo 'node dist/main.js' > deploy/startup.txt
          
          # Create .deployment file to specify startup command
          cat > deploy/.deployment << 'EOF'
          [config]
          command = node dist/main.js
          EOF

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: ./deploy

      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30

      - name: Health check
        run: |
          echo "Performing health check..."
          # Wait a bit more for the app to fully start
          sleep 60
          
          # Try to hit the health endpoint
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "Checking health at: $HEALTH_URL"
          
          # Use curl with retry logic
          for i in {1..5}; do
            if curl -f -s "$HEALTH_URL" > /dev/null; then
              echo "✅ Health check passed!"
              break
            else
              echo "⚠️  Health check attempt $i failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**App Service:** ${{ env.AZURE_WEBAPP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Resource Group:** ${{ env.AZURE_RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "**Health Check:** https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the application is running correctly" >> $GITHUB_STEP_SUMMARY
          echo "2. Check Azure App Service logs if needed" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor application performance" >> $GITHUB_STEP_SUMMARY 