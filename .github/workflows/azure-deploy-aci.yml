name: Deploy to Azure Container Instances

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'package.json'
      - 'Dockerfile'
      - '.github/workflows/azure-deploy-aci.yml'
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag'
        required: false
        default: 'latest'
      environment:
        description: 'Environment'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production

env:
  ACR_NAME: vorbaacr
  ACI_NAME: vorba-file-service-4
  RESOURCE_GROUP: vorba-file-service-rg
  IMAGE_NAME: file-service
  IMAGE_TAG: ${{ github.event.inputs.image_tag || github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Login to Azure Container Registry
        run: |
          az acr login --name ${{ env.ACR_NAME }}
          
      - name: Get ACR credentials
        id: acr-credentials
        run: |
          echo "username=$(az acr credential show --name ${{ env.ACR_NAME }} --query "username" --output tsv)" >> $GITHUB_OUTPUT
          echo "password=$(az acr credential show --name ${{ env.ACR_NAME }} --query "passwords[0].value" --output tsv)" >> $GITHUB_OUTPUT
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          
      - name: Deploy to Azure Container Instances
        run: |
          # Check if ACI exists
          ACI_EXISTS=$(az container show --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --output json 2>/dev/null | jq -r '.name // empty')
          
          if [ -n "$ACI_EXISTS" ]; then
            echo "Updating existing ACI instance..."
            az container create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.ACI_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --registry-login-server ${{ env.ACR_NAME }}.azurecr.io \
              --registry-username ${{ steps.acr-credentials.outputs.username }} \
              --registry-password ${{ steps.acr-credentials.outputs.password }} \
              --dns-name-label ${{ env.ACI_NAME }} \
              --os-type Linux \
              --ports 3000 \
              --cpu 2 \
              --memory 4 \
              --restart-policy Always \
              --assign-identity [system] \
              --environment-variables \
                NODE_ENV=${{ github.event.inputs.environment || 'production' }} \
                PORT=3000 \
                PLAYWRIGHT_BROWSER_PATH=/ms-playwright/chromium-*/chrome-linux/chrome \
              --output none
          else
            echo "Creating new ACI instance..."
            az container create \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.ACI_NAME }} \
              --image ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
              --registry-login-server ${{ env.ACR_NAME }}.azurecr.io \
              --registry-username ${{ steps.acr-credentials.outputs.username }} \
              --registry-password ${{ steps.acr-credentials.outputs.password }} \
              --dns-name-label ${{ env.ACI_NAME }} \
              --os-type Linux \
              --ports 3000 \
              --cpu 2 \
              --memory 4 \
              --restart-policy Always \
              --assign-identity [system] \
              --environment-variables \
                NODE_ENV=${{ github.event.inputs.environment || 'production' }} \
                PORT=3000 \
                PLAYWRIGHT_BROWSER_PATH=/ms-playwright/chromium-*/chrome-linux/chrome \
              --output none
          fi
          
      - name: Grant Key Vault Access
        run: |
           echo "Granting Key Vault access to ACI managed identity..."
           
           # Get ACI principal ID
           ACI_PRINCIPAL_ID=$(az container show --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "identity.principalId" --output tsv)
           
           if [ -z "$ACI_PRINCIPAL_ID" ]; then
             echo "❌ Could not get principal ID for ACI managed identity"
             exit 1
           fi
           
           echo "ACI Principal ID: $ACI_PRINCIPAL_ID"
           
           # Check Key Vault authorization type
           KV_RBAC=$(az keyvault show --name vorba-file-service-kv --query "properties.enableRbacAuthorization" --output tsv)
           
           if [ "$KV_RBAC" = "true" ]; then
             echo "⚠️ Key Vault uses RBAC authorization, but GitHub Actions lacks permission to assign roles."
             echo "⚠️ Please manually grant 'Key Vault Secrets User' role to the ACI managed identity:"
             echo "   Principal ID: $ACI_PRINCIPAL_ID"
             echo "   Key Vault: vorba-file-service-kv"
             echo "   Role: Key Vault Secrets User"
             echo ""
             echo "Or run this command manually:"
             echo "az role assignment create --assignee $ACI_PRINCIPAL_ID --role 'Key Vault Secrets User' --scope '/subscriptions/236217f7-0ad4-4dd6-8553-dc4b574fd2c5/resourceGroups/vorba-file-service-rg/providers/Microsoft.KeyVault/vaults/vorba-file-service-kv'"
             echo ""
             echo "For now, continuing without Key Vault access..."
           else
             echo "Key Vault uses policy-based authorization. Setting access policy..."
             az keyvault set-policy --name vorba-file-service-kv --object-id $ACI_PRINCIPAL_ID --secret-permissions get list
             echo "✅ Key Vault policy access granted"
           fi
          
      
          
      - name: Wait for ACI to be ready
        run: |
           echo "Waiting for ACI to be ready..."
           sleep 30  # Give ACI time to provision
          
      - name: Get ACI status
        run: |
          ACI_STATUS=$(az container show --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "provisioningState" --output tsv)
          echo "ACI Status: $ACI_STATUS"
          
          if [ "$ACI_STATUS" = "Succeeded" ]; then
            echo "✅ ACI deployment successful!"
            
            # Get the FQDN
            FQDN=$(az container show --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "ipAddress.fqdn" --output tsv)
            echo "🌐 ACI URL: http://$FQDN:3000"
            
            # Test health endpoint
            echo "🏥 Testing health endpoint..."
            sleep 30  # Wait for container to fully start
            
            HEALTH_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "http://$FQDN:3000/health" || echo "000")
            if [ "$HEALTH_RESPONSE" = "200" ]; then
              echo "✅ Health check passed!"
            else
              echo "⚠️ Health check failed (HTTP $HEALTH_RESPONSE)"
            fi
          else
            echo "❌ ACI deployment failed with status: $ACI_STATUS"
            exit 1
          fi
          
      - name: Show ACI logs
        if: always()
        run: |
           echo "📋 Recent ACI logs:"
           az container logs --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}
          
      - name: Post deployment info
        if: success()
        run: |
          FQDN=$(az container show --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "ipAddress.fqdn" --output tsv)
          echo "## 🚀 ACI Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **ACI Name**: ${{ env.ACI_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL**: http://$FQDN:3000" >> $GITHUB_STEP_SUMMARY
                           echo "- **Environment**: ${{ github.event.inputs.environment || 'production' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
                           echo "### ⚠️ Important Notes" >> $GITHUB_STEP_SUMMARY
                 echo "- ACI has no free tier - you pay per second of runtime" >> $GITHUB_STEP_SUMMARY
                 echo "- ACI uses managed identity for Key Vault access (no secrets in environment variables)" >> $GITHUB_STEP_SUMMARY
                 echo "- Remember to stop ACI after testing: \`az container stop --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}\`" >> $GITHUB_STEP_SUMMARY
                 echo "- Use \`az container logs --name ${{ env.ACI_NAME }} --resource-group ${{ env.RESOURCE_GROUP }}\` to view logs" >> $GITHUB_STEP_SUMMARY
